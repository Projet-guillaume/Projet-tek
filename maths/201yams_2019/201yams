#!/usr/bin/env python3

import sys
from math import factorial

liste = []

def binomiale(a, b):
    res = (factorial(a) / (factorial(b) * factorial(a - b))) * pow(1 / 6, b) * pow(5 / 6, a - b)
    return res

def proba_yams(c, val):
    res = 0
    b = liste.count(val)
    if b >= c:
        res = 1
    else:
        tmp = c - b
        while tmp < 6 - b:
            res = res + binomiale(5 - b, tmp)
            tmp = tmp + 1
    return res

def proba_full(nb, nb2):
    res = 0
    nb = nb
    nb2 = nb2
    b = liste.count(nb)
    b2 = liste.count(nb2)
    if b == 3 and b2 == 2:
        res = 1
    else:
        if (b > 3):
            b = 3
        if (b2 > 2):
            b2 = 2
        pair = factorial(5 - b - b2) / (factorial(3 - b2) * factorial((5 - b2 - b) - (3 - b)))
        brelan = factorial(2 - b2) / (factorial(2 - b2) * factorial((2 - b2) - (2 - b2)))
        res = (pair * brelan) / 6**(5 - b - b2)
    return res

def result(nb, str,  res):
    print("Chances to get a " + nb + " " + str + ": %0.2f%%" % (res * 100))

def result_full(nb, nb1, str,  res):
    print("Chances to get a " + nb + str + nb1 + ": %0.2f%%" % (res * 100))

def finder(num):
    i = 0
    ret = 0
    while (i < 5):
        if (liste[i] == num):
            ret += 1
        i += 1
    if (ret > 1):
        ret = 1
    return (ret)

def proba_straight(nb):
    res = 0
    if (nb == 6):
        b = finder(2) + finder(3) + finder(4) + finder(5) + finder(6)
    else:
        b = finder(1) + finder(2) + finder(3) + finder(4) + finder(5)
    if b == 5:
        res = 1
    else:
        res = factorial(5 - b) / 6**(5 - b)
    return res

def find_yams(val):
    if val[0] == "yams" and int(val[1]) >= 0 and int(val[1]) <= 6:
        result(val[1], "yams", proba_yams(5, int(val[1])))
    elif val[0] == "four" and int(val[1]) >= 0 and int(val[1]) <= 6:
        result(val[1], "four-of-a-kind", proba_yams(4, liste[1]))
    elif val[0] == "three" and int(val[1]) >= 0 and int(val[1]) <= 6:
        result(val[1], "three-of-a-kind", proba_yams(3, liste[1]))
    elif val[0] == "pair" and int(val[1]) >= 0 and int(val[1]) <= 6:
        result(val[1], "pair", proba_yams(2, int(val[1])))
    elif val[0] == "straight" and int(val[1]) >= 5 and int(val[1]) <= 6:
        result(val[1], "straight", proba_straight(int(val[1])))
    elif val[0] == "full":
        if len(val) < 3:
            exit(0)
        elif int(val[1]) >= 0 and int(val[1]) <= 6 and int(val[1]) != int(val[2]):
            result_full(val[1], val[2], " full of ", proba_full(int(val[1]), int(val[2])))
        else:
            exit(1)
    else:
        exit(84)

if len(sys.argv) != 7:
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print("USAGE\n    ./201yams d1 d2 d3 d4 d5 c\n")
        print("DESCRIPTION\n    d1      value of the first die (0 if not thrown)")
        print("    d2      value of the second die (0 if not thrown)")
        print("    d3      value of the third die (0 if not thrown)")
        print("    d4      value of the fourth die (0 if not thrown)")
        print("    d5      value of the fifth die (0 if not thrown)")
        print("    c       expected combination")
    else:
        print("Bad arguments")
        exit(84)
else:
    try:
        d1 = int(sys.argv[1])
        d2 = int(sys.argv[2])
        d3 = int(sys.argv[3])
        d4 = int(sys.argv[4])
        d5 = int(sys.argv[5])
        combination = sys.argv[6]
        val = combination.split('_')
        if (d1 >= 0 and d1 <= 6 and d2 >= 0 and d2 <= 6 and d3 >= 0 and d3 <= 6 and d4 >= 0 and d4 <= 6 and d5 >= 0 and d5 <= 6):
            liste.append(d1)
            liste.append(d2)
            liste.append(d3)
            liste.append(d4)
            liste.append(d5)
        else:
            print("Your dies value are incorrect")
            exit(84)
        if (len(val) < 2):
            print("Combination is bad")
            exit(84)
        find_yams(val)
    except ValueError:
        print("Error")
        exit(84)
